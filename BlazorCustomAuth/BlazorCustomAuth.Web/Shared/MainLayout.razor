@inherits LayoutComponentBase
@using BlazorCustomAuth.Web.Pages.Auth;
@using Blazored.Toast.Configuration
@implements IDisposable
@using System.Reflection
@using Microsoft.AspNetCore.Components
@inject IJSRuntime Js
<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="10"
                IconType="IconType.FontAwesome"
                SuccessClass="success-toast-override"
                SuccessIcon="fa fa-thumbs-up"
                ErrorIcon="fa fa-bug" />
<AuthorizeView>
    <Authorized>
        <MatAnchorUtils></MatAnchorUtils>
        <MatAppBar Style="z-index: 100;" Class="mat">
            <MatAppBarRow>
                <MatAppBarSection>
                    <MatIconButton Icon="menu" OnClick="@((e) => MenuButtonClicked())"></MatIconButton>
                    <MatAppBarTitle>Blazor App</MatAppBarTitle>
                </MatAppBarSection>
                <MatAppBarSection Align="@MatAppBarSectionAlign.End">
                    <LogOut></LogOut>
                </MatAppBarSection>
            </MatAppBarRow>
        </MatAppBar>

        <MatDrawerContainer Style="width: 100vw; height: 100vh;" Class="mat">
            <MatHidden Breakpoint="@MatBreakpoint.SM" Direction="@MatHiddenDirection.Up" HiddenChanged="@ModelDrawerHiddenChanged">
                <ChildContent>
                    <MatDrawer @bind-Opened="@_navMenuOpened" Mode="@MatDrawerMode.Modal">
                        <MatAppBarAdjust></MatAppBarAdjust>
                        <NavMenu></NavMenu>
                    </MatDrawer>
                </ChildContent>
                <ElseContent>
                    <MatDrawer @bind-Opened="@_navMenuOpened" Mode="@MatDrawerMode.Dismissible">
                        <MatAppBarAdjust></MatAppBarAdjust>
                        <NavMenu></NavMenu>
                    </MatDrawer>
                </ElseContent>
            </MatHidden>

            <MatDrawerContent Class="mdc-theme--background">
                <MatAppBarAdjust></MatAppBarAdjust>
                <div class="body-wrapper">
                    @Body
                </div>
            </MatDrawerContent>
        </MatDrawerContainer>
    </Authorized>
    <NotAuthorized>
        <Login>
        </Login>
    </NotAuthorized>

</AuthorizeView>

@code {

    BaseMatIconButton themeButton;
    BaseMatMenu Menu;


    [CascadingParameter]
    MatTheme theme { get; set; }


    public string ThemePrimary
    {
        get { return theme.Primary; }
        set
        {
            theme.Primary = value;
            theme.ThemeHasChanged();
        }
    }


    protected void ModelDrawerHiddenChanged(bool hidden)
    {
        if (!hidden)
        {
            _navMenuOpened = false;
        }
    }

    public void OnClick(MouseEventArgs e)
    {
        this.Menu.OpenAsync(themeButton.Ref);
    }

    bool lazySnackbarIsOpen = false;

    bool _navMenuOpened = true;

    void MenuButtonClicked()
    {
        _navMenuOpened = !_navMenuOpened;
        this.StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

       await Task.Delay(TimeSpan.FromSeconds(5))
            .ContinueWith((_) => { this.lazySnackbarIsOpen = true; });
    }

    public void Dispose()
    {
    }

}